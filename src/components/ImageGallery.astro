---
export interface Props {
  images: Array<{
    src: string;
    alt: string;
    category: string;
  }>;
}

const { images } = Astro.props;

// Get unique categories
const categories = ['Alle', ...new Set(images.map(img => img.category))];
---

<div class="image-gallery">
  <!-- Category Tabs -->
  <div class="gallery-tabs">
    {categories.map(category => (
      <button 
        class="tab-button" 
        data-category={category === 'Alle' ? 'all' : category.toLowerCase()}
        data-active={category === 'Alle'}
      >
        {category}
      </button>
    ))}
  </div>

  <!-- Masonry Grid -->
  <div class="gallery-grid" id="gallery-grid">
    {images.map((image, index) => (
      <div 
        class="gallery-item" 
        data-category={image.category.toLowerCase()}
        data-index={index}
      >
        <img 
          src={image.src} 
          alt={image.alt}
          loading="lazy"
        />
        <div class="gallery-overlay">
          <span class="category-tag">{image.category}</span>
        </div>
      </div>
    ))}
  </div>

  <!-- Lightbox -->
  <div class="lightbox" id="lightbox">
    <div class="lightbox-content">
      <button class="lightbox-close" id="lightbox-close">&times;</button>
      <button class="lightbox-nav lightbox-prev" id="lightbox-prev">‹</button>
      <button class="lightbox-nav lightbox-next" id="lightbox-next">›</button>
      <img class="lightbox-image" id="lightbox-image" alt="" />
      <div class="lightbox-info">
        <span class="lightbox-category" id="lightbox-category"></span>
        <span class="lightbox-counter" id="lightbox-counter"></span>
      </div>
    </div>
  </div>
</div>

<style>
  .image-gallery {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
  }

  /* Category Tabs */
  .gallery-tabs {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  .tab-button {
    padding: 0.75rem 1.5rem;
    border: 2px solid #e5e7eb;
    background: white;
    color: #6b7280;
    border-radius: 50px;
    font-family: 'DM Sans', sans-serif;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .tab-button:hover {
    border-color: #8b7355;
    color: #8b7355;
    transform: translateY(-2px);
  }

  .tab-button[data-active="true"] {
    background: #8b7355;
    border-color: #8b7355;
    color: white;
    box-shadow: 0 4px 12px rgba(139, 115, 85, 0.3);
  }

  /* Masonry Grid */
  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
  }

  .gallery-item {
    position: relative;
    border-radius: 12px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    background: #f8f9fa;
    aspect-ratio: 1.2;
  }

  .gallery-item:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
  }

  .gallery-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.4s ease;
  }

  .gallery-item:hover img {
    transform: scale(1.1);
  }

  .gallery-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      to bottom,
      transparent 0%,
      transparent 60%,
      rgba(0, 0, 0, 0.7) 100%
    );
    display: flex;
    align-items: flex-end;
    padding: 1rem;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .gallery-item:hover .gallery-overlay {
    opacity: 1;
  }

  .category-tag {
    background: rgba(255, 255, 255, 0.9);
    color: #2b2419;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-family: 'DM Sans', sans-serif;
    font-weight: 600;
    font-size: 0.875rem;
    backdrop-filter: blur(10px);
  }

  /* Simple Grid Layout */
  .gallery-item:nth-child(3n) {
    aspect-ratio: 1.5;
  }

  .gallery-item:nth-child(5n) {
    aspect-ratio: 0.8;
  }

  .gallery-item:nth-child(7n) {
    aspect-ratio: 1.8;
  }

  /* Lightbox */
  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.95);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .lightbox.active {
    opacity: 1;
    visibility: visible;
  }

  .lightbox-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .lightbox-image {
    max-width: 100%;
    max-height: 90vh;
    object-fit: contain;
    border-radius: 8px;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5);
    transform: scale(0.8);
    transition: transform 0.3s ease;
  }

  .lightbox.active .lightbox-image {
    transform: scale(1);
  }

  .lightbox-close {
    position: absolute;
    top: -50px;
    right: 0;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: white;
    font-size: 2rem;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .lightbox-close:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.1);
  }

  .lightbox-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: white;
    font-size: 2rem;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .lightbox-prev {
    left: -80px;
  }

  .lightbox-next {
    right: -80px;
  }

  .lightbox-nav:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-50%) scale(1.1);
  }

  .lightbox-info {
    position: absolute;
    bottom: -60px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 1rem;
    align-items: center;
    color: white;
    font-family: 'DM Sans', sans-serif;
  }

  .lightbox-category {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    backdrop-filter: blur(10px);
  }

  .lightbox-counter {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    backdrop-filter: blur(10px);
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 0.75rem;
    }

    .gallery-tabs {
      gap: 0.5rem;
      margin-bottom: 1.5rem;
    }

    .tab-button {
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
    }

    .lightbox-nav {
      width: 50px;
      height: 50px;
      font-size: 1.5rem;
    }

    .lightbox-prev {
      left: 10px;
    }

    .lightbox-next {
      right: 10px;
    }

    .lightbox-close {
      top: 20px;
      right: 20px;
      width: 40px;
      height: 40px;
      font-size: 1.5rem;
    }

    .lightbox-info {
      bottom: 20px;
      flex-direction: column;
      gap: 0.5rem;
    }
  }

  /* Filter Animation */
  .gallery-item.filtered {
    opacity: 0;
    transform: scale(0.8);
    pointer-events: none;
    transition: all 0.3s ease;
  }

  .gallery-item:not(.filtered) {
    opacity: 1;
    transform: scale(1);
    transition: all 0.3s ease;
  }
</style>

<script>
  // Simple and robust gallery implementation
  document.addEventListener('DOMContentLoaded', function() {
    const galleryItems = document.querySelectorAll('.gallery-item');
    const tabButtons = document.querySelectorAll('.tab-button');
    const lightbox = document.getElementById('lightbox');
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxCategory = document.getElementById('lightbox-category');
    const lightboxCounter = document.getElementById('lightbox-counter');
    const lightboxClose = document.getElementById('lightbox-close');
    const lightboxPrev = document.getElementById('lightbox-prev');
    const lightboxNext = document.getElementById('lightbox-next');

    let currentIndex = 0;
    let filteredImages = [];

    // Initialize
    function init() {
      filteredImages = Array.from(galleryItems);
      bindEvents();
    }

    // Bind events
    function bindEvents() {
      // Tab filtering
      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const category = this.dataset.category;
          filterImages(category);
          updateTabButtons(category);
        });
      });

      // Gallery item clicks
      galleryItems.forEach((item, index) => {
        item.addEventListener('click', function() {
          openLightbox(index);
        });
      });

      // Lightbox controls
      if (lightboxClose) lightboxClose.addEventListener('click', closeLightbox);
      if (lightboxPrev) lightboxPrev.addEventListener('click', previousImage);
      if (lightboxNext) lightboxNext.addEventListener('click', nextImage);

      // Keyboard navigation
      document.addEventListener('keydown', function(e) {
        if (!lightbox.classList.contains('active')) return;
        
        switch(e.key) {
          case 'Escape':
            closeLightbox();
            break;
          case 'ArrowLeft':
            previousImage();
            break;
          case 'ArrowRight':
            nextImage();
            break;
        }
      });

      // Click outside to close
      if (lightbox) {
        lightbox.addEventListener('click', function(e) {
          if (e.target === lightbox) {
            closeLightbox();
          }
        });
      }
    }

    // Filter images by category
    function filterImages(category) {
      galleryItems.forEach(item => {
        const itemCategory = item.dataset.category;
        const shouldShow = category === 'all' || itemCategory === category;
        
        if (shouldShow) {
          item.style.display = 'block';
          item.classList.remove('filtered');
        } else {
          item.style.display = 'none';
          item.classList.add('filtered');
        }
      });

      // Update filtered images array
      filteredImages = Array.from(galleryItems).filter(item => 
        item.style.display !== 'none'
      );
    }

    // Update tab button states
    function updateTabButtons(activeCategory) {
      tabButtons.forEach(button => {
        button.dataset.active = button.dataset.category === activeCategory;
      });
    }

    // Open lightbox
    function openLightbox(index) {
      const visibleItems = Array.from(galleryItems).filter(item => 
        item.style.display !== 'none'
      );
      
      currentIndex = visibleItems.indexOf(galleryItems[index]);
      
      if (currentIndex === -1) currentIndex = 0;
      
      const currentImage = visibleItems[currentIndex];
      const img = currentImage.querySelector('img');
      
      lightboxImage.src = img.src;
      lightboxImage.alt = img.alt;
      lightboxCategory.textContent = currentImage.dataset.category;
      lightboxCounter.textContent = `${currentIndex + 1} / ${visibleItems.length}`;
      
      lightbox.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    // Close lightbox
    function closeLightbox() {
      lightbox.classList.remove('active');
      document.body.style.overflow = '';
    }

    // Previous image
    function previousImage() {
      const visibleItems = Array.from(galleryItems).filter(item => 
        item.style.display !== 'none'
      );
      
      currentIndex = currentIndex > 0 ? currentIndex - 1 : visibleItems.length - 1;
      updateLightboxImage();
    }

    // Next image
    function nextImage() {
      const visibleItems = Array.from(galleryItems).filter(item => 
        item.style.display !== 'none'
      );
      
      currentIndex = currentIndex < visibleItems.length - 1 ? currentIndex + 1 : 0;
      updateLightboxImage();
    }

    // Update lightbox image
    function updateLightboxImage() {
      const visibleItems = Array.from(galleryItems).filter(item => 
        item.style.display !== 'none'
      );
      
      const currentImage = visibleItems[currentIndex];
      const img = currentImage.querySelector('img');
      
      lightboxImage.src = img.src;
      lightboxImage.alt = img.alt;
      lightboxCategory.textContent = currentImage.dataset.category;
      lightboxCounter.textContent = `${currentIndex + 1} / ${visibleItems.length}`;
    }

    // Initialize gallery
    init();
  });
</script>
